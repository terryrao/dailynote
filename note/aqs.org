#+TITLE: ABstractQueuedSynchronizer
#+DATE: <2019-06-06 Thu>

* api 文档

AQS 提供了一个依赖于先进先出(FIFO)的等待队列的框架去实现阻塞式锁和相关的同步器（信号、事件等）。 这个类被设计成一个对绝大多数同步器有用的基础，它依赖于一个单独的原子 ~int~ 值来代表状态。 子类定义 protected 方法来改变这个 ~state~ ,并根据要猎取或者释放此对象定义该状态的含义。有鉴于此，在这个类的其它方法都带有队列和阻塞机制。子类可以持有自己的域，但只有使用 ~getState(),setState()~ 和 ~compareAndSetState(int,int)~ 原子更新 ~int~ 值操作才能代表同步。

子类应该被定义成一个非公开的内部辅助类用来实现包装类的同步属性。AQS 没有实现任何同步接口，相反它定义了一系列方法，如 ~acquireInterruptibly~ 给具体的锁和相关同步器调用来实现它们的公开方法。

这个类提供一个默认的 /独占/ 和一个 /共享/ 锁模式。在已获得的独占模式中，其它线程偿试获取锁会失败。共享模式下可能有多个线程获取锁都会成功（也可能不会成功）。这个类不会去试图理解这些区别，除非在机械意义上，当共享模式获取成功，下一个等待线各（如果存在的话）必须决定是否也可以获取。线程等待在不同的模式中分享同一个 FIFO 队列。通常实现的子类只提供其中一种模式，但两者都可以发挥作用，如同 ~ReadWriteLock~ 类。子类仅仅只需要提供是独占模式还是共享模式不需要定义方法去实现一些没用的模式。

这个类定义了一个嵌套类 ~AbstractQueuedSynchronizer.ConditionObject~ 它可以做为 ~Condition~ 的一个实现支持独占模式， ~isHeldExclusivesly()~ 方法能报告同步器是否持有当前的线程， 使用当前线程调用 ~release(int)~ 方法， ~getState()~ 会完全释放这个对象， ~acquire(int)~ 可保存状态值，最终将此值恢复之前获取的状态。没有 ~AbstractQueuedSynchronizer~ 方法之外创建之个 condition 。如果无法满足此约束，请不要使用它。 ~AbstractQueuedSynchronizer.ConditionObject~ 的行为当然取决于其同步实现的语义。

这个提供了检查，检测和监视的方法， ~ConditionObject~ 也有对类似的方法。这些可以根据需求使用 ~AbstractQueuedSynchronizer~ 导出到类中，用于它们的同步机制。此类的序列化仅存储基础的原子整型保持同步状态，所以反序列化后会得到一个空的线程队列。典型的子类应该可序列化需要定义一个 readObject 方法，该方法可以在反序列化时将其恢复到已知的初始状态。

* 使用

要使用这个类做为同步器的基础，请通过使用 ~getState()~  、 ~setState(int)~ 和 ~compareAndSetState(int,int)~   检查或者修改同步状态重新定义下面的方法:
- tryAcquire(int)
- tryRelease(int)
- tryAcquireShared(int)
- tryReleaseShared(int)
- isHeldExclusively()
上面每一个方法默认会抛出 ~UnsupportedOperationException~ 。 实现这些方法必须是线程安全的。 而且必须短且没有阻塞。定义这些方法是使用此类的唯一受支持的方法。其它方法都被声明为 ~final~ ，因为他们是不能独立变化的。

你可能也会现继承自  ~AbstractOwnableSynchronizer~ 的方法对于保持追踪线程持有独占同步器非常有用。你被鼓励使用它们，它们是监视和诊断工作辅助用户决定哪些线程持有锁。

尽管这个类是基于一个内部的 FIFO 队列，它并不强制使用 FIFO 获取锁策略，独占同步器的核心有以下形式：

#+BEGIN_SRC 
Acquire:
    where (!tryAcquire(arg)) {
        enqueue thread if it is not already queued;
        possibly block current thread;
    }

Release:
    if(tryRelease(arg))
        unblock the first queued thread;

#+END_SRC

(共享式也是类型的但可能涉及到级联信号)

因为入队之前已经调用了获取中的查检，新的获取线程可能会先阻塞其它已阻塞的和排队的线程。However, you can, if desired, define tryAcquire and/or tryAcquireShared to disable barging by internally invoking one or more of the inspection methods, thereby providing a fair FIFO acquisition order. In particular, most fair synchronizers can define tryAcquire to return false if hasQueuedPredecessors() (a method specifically designed to be used by fair synchronizers) returns true. Other variations are possible.

Throughput and scalability are generally highest for the default barging (also known as greedy, renouncement, and convoy-avoidance) strategy. While this is not guaranteed to be fair or starvation-free, earlier queued threads are allowed to recontend before later queued threads, and each recontention has an unbiased chance to succeed against incoming threads. Also, while acquires do not "spin" in the usual sense, they may perform multiple invocations of tryAcquire interspersed with other computations before blocking. This gives most of the benefits of spins when exclusive synchronization is only briefly held, without most of the liabilities when it isn't. If so desired, you can augment this by preceding calls to acquire methods with "fast-path" checks, possibly prechecking hasContended() and/or hasQueuedThreads() to only do so if the synchronizer is likely not to be contended.

This class provides an efficient and scalable basis for synchronization in part by specializing its range of use to synchronizers that can rely on int state, acquire, and release parameters, and an internal FIFO wait queue. When this does not suffice, you can build synchronizers from a lower level using atomic classes, your own custom Queue classes, and LockSupport blocking support.

* 示例

下面是一个不可重入的互斥锁类，它使用 0 值代表无锁状态，1 代表有锁状态。 既然一个不可重入锁没有严格获取记录当前持有线程，这个类可以简单的用于监控，它也支持条件和导出检测方法。
#+BEGIN_SRC java
// Our internal helper class

private static class Sync extends AbstractQueuedSynchronizer {
     // Report whether in locked state
     protected boolean isHeldExclusively() {
       return getState() == 1;
     }

     // Acquire the lock if state is zero
     public boolean tryAcquire(int acquires) {
       assert acquires == 1; // Otherwise unused
       if (compareAndSetState(0, 1)) {
         setExclusiveOwnerThread(Thread.currentThread());
         return true;
       }
       return false;
     }

     // Release the lock by setting state to zero
     protected boolean tryRelease(int releases) {
       assert releases == 1; // Otherwise unused
       if (getState() == 0) throw new IllegalMonitorStateException();
       setExclusiveOwnerThread(null);
       setState(0);
       return true;
     }

     // Provide a Condition
     Condition newCondition() { return new ConditionObject(); }

     // Deserialize properly
     private void readObject(ObjectInputStream s)
         throws IOException, ClassNotFoundException {
       s.defaultReadObject();
       setState(0); // reset to unlocked state
     }
   }

   // The sync object does all the hard work. We just forward to it.
   private final Sync sync = new Sync();

   public void lock()                { sync.acquire(1); }
   public boolean tryLock()          { return sync.tryAcquire(1); }
   public void unlock()              { sync.release(1); }
   public Condition newCondition()   { return sync.newCondition(); }
   public boolean isLocked()         { return sync.isHeldExclusively(); }
   public boolean hasQueuedThreads() { return sync.hasQueuedThreads(); }
   public void lockInterruptibly() throws InterruptedException {
     sync.acquireInterruptibly(1);
   }
   public boolean tryLock(long timeout, TimeUnit unit)
       throws InterruptedException {
     return sync.tryAcquireNanos(1, unit.toNanos(timeout));
   }
 }

#+END_SRC

下面是一个闩类有点像 ~CountDownLatch~ 除了它只能获阳一个单一的信号来发射。因为一个闩是非独点到的，所以它使用的是共享模式获得和释放方法。
#+BEGIN_SRC java
class BooleanLatch {

   private static class Sync extends AbstractQueuedSynchronizer {
     boolean isSignalled() { return getState() != 0; }

     protected int tryAcquireShared(int ignore) {
       return isSignalled() ? 1 : -1;
     }

     protected boolean tryReleaseShared(int ignore) {
       setState(1);
       return true;
     }
   }

   private final Sync sync = new Sync();
   public boolean isSignalled() { return sync.isSignalled(); }
   public void signal()         { sync.releaseShared(1); }
   public void await() throws InterruptedException {
     sync.acquireSharedInterruptibly(1);
   }
 }

#+END_SRC